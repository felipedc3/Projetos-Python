from abc import ABC, abstractmethod
from datetime import datetime


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transações(self, conta, transacao):
        transacao.registrar(conta)
    
    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, cpf, data_nascimento, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento

class Conta:
    def __init__(self, saldo, numero, cliente, agencia='0001'):
        self._saldo = 0.0
        self._numero = numero
        self._agencia = '0001'
        self._cliente = cliente
        self._historico = Historico()

@classmethod
def nova_conta(cls, cliente, numero):
    return cls(numero, cliente)

@property
def saldo(self):
    return self._saldo

@property
def numero(self):
    return self._numero

@property
def agencia(self):
    return self._agencia

@property
def cliente(self):
    return self._cliente

@property
def historico(self):
    return self._historico

def sacar(self, valor):
    saldo = self.saldo
    excedeu_limite_saldo = valor > saldo

    if excedeu_limite_saldo:
        print(f'OPERAÇÃO FALHOU! Saldo insuficiente.')
    
    elif valor > 0:
        self._saldo -= valor
        print(f'Saque realizado com sucesso no valor de R${valor:.2f}')
        print('**' * 20)

        return True

    else:
        print('OPERAÇÃO FALHOU! Valor inválido informado')

    return False

def depositar(self, valor):
    if valor > 0:
        self._saldo += valor
        print(f'Deposito realizado com sucesso no valor de R${valor:.2f}')
        print('**' * 20)

    else:
        print('Operação falhou! Informe um valor válido para realizar o deposito.')

        return False
    
    return True

class conta_corrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(saldo, numero, '0001', cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len([transacao for transacao in self.historico.trasacoes
                             if transacao['tipo'] == Saque.__name__]) 
        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques

        if excedeu_limite:
            print('OPERAÇÃO FALHOU! Valor de saque excedido. Limite máximo por saque: R$500,00')
            return False
        elif excedeu_saques:
            print('OPERAÇÃO FALHOU! Quantidade de saques diarios excedidos')
            return False
        else:
            return super().sacar(valor)


    def __str__(self):
        return f"""\
                Agência:\t{self.agencia}\n
                C/C:\t{self.numero}
                Titular:\t{self.cliente.nome}
            """

class Historico:
    def __init__(self):
        self._transacoes = []
    
    @property
    def transacoes(self):
        return self._transacoes
    
    def nova_transacao(self, transacao):
        self._transacoes.append({
            'tipo': transacao.__class__.__nome__,
            'valor': transacao.valor,
            'data': datetime.now().streftime('%d-%m-%Y %H:%M:%s'),
        })


class Transacao(ABC):

    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        transacao_sucedida = conta.sacar(self.valor)

        if transacao_sucedida:
            conta.historico.nova_transacao(self)


class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        transacao_sucedida = conta.depositar(self.valor)

        if transacao_sucedida:
            conta.historico.nova_transacao(self)
